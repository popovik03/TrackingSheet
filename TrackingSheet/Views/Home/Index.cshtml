@model TrackingSheet.Models.ViewModels.CombinedDataViewModel
@using System.Security.Claims
@using System.IO
@using Microsoft.AspNetCore.Hosting
@inject IWebHostEnvironment env


@{
    ViewData["Title"] = "Главная";
    var loggedUser = User.Identity.IsAuthenticated ? User.Identity.Name : "Гость";
    var currentTime = DateTime.Now.TimeOfDay;
    var shift = (currentTime >= new TimeSpan(20, 0, 0) || currentTime < new TimeSpan(8, 0, 0)) ? "Night" : "Day";
    
}

<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>

    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/jquery.dataTables.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.4.1/css/buttons.dataTables.min.css">
    <link rel="stylesheet" href="https://cdn.datatables.net/select/1.5.0/css/select.dataTables.min.css">

    <link rel="stylesheet" href="~/css/dailymain.css" />

    <!-- Подключаем jQuery -->
    <script src="@Url.Content("~/vendor/jquery/dist/jquery.js")"></script>

    <!-- Подключение DataTables -->
    <script src="@Url.Content("~/vendor/datatables.net/js/dataTables.js")"></script>
    <script src="@Url.Content("~/vendor/datatables.net-buttons/js/dataTables.buttons.js")"></script>
    <script src="@Url.Content("~/vendor/datatables.net-buttons-dt/js/buttons.dataTables.js")"></script>
    <script src="@Url.Content("~/vendor/datatables.net-select/js/dataTables.select.js")"></script>
    <script src="@Url.Content("~/vendor/datatables.net-select-dt/js/select.dataTables.js")"></script>
    <script src="@Url.Content("~/vendor/datatables.net-datetime/dist/dataTables.dateTime.min.js")"></script>

    <!-- Подключение Moment.js и плагин сортировки для DataTables -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
    <script src="https://cdn.datatables.net/plug-ins/1.13.6/sorting/datetime-moment.js"></script>

    <!-- Подключение библиотеки для работы с Excel -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.16.9/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
    <!-- ExcelJS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/4.3.0/exceljs.min.js"></script>

    <!-- Подключение Flatpickr CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

    <!-- Подключение Flatpickr JS -->
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/ru.js"></script>

    <!-- Подключение библиотеки SignalR с правильным integrity атрибутом -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"
            integrity="sha512-k8WL9L2jG8KyG3pCJA4mHMdg2YSoWrdB5QNqLIhROv69udwp87WvbqzbsiAL65wy7T9jHU7rAoePr1ToPBc0Lw=="
            crossorigin="anonymous" referrerpolicy="no-referrer"></script>
   

    
</head>

<body>
    @Html.AntiForgeryToken()

    <div class="daily-main">
        <div class="daily-main-left">
            <div class="custom-border-shadow">

                <div class="summary-header">
                    <h2>Суточная сводка</h2>
                    

                    <!-- Контейнер для кнопок редактирования -->
                    <div class="button-container-edit">
                        <!-- Новая кнопка добавления записи -->
                        <button id="add-record" class="btn-edit-table" title="Добавить новую запись">
                            <!-- Вставьте содержимое файла add.svg здесь -->
                            <svg class="icon-edit" style="stroke-width: 1" viewBox="0 0 19 19" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path fill="none" d="M13.388,9.624h-3.011v-3.01c0-0.208-0.168-0.377-0.376-0.377S9.624,6.405,9.624,6.613v3.01H6.613c-0.208,0-0.376,0.168-0.376,0.376s0.168,0.376,0.376,0.376h3.011v3.01c0,0.208,0.168,0.378,0.376,0.378s0.376-0.17,0.376-0.378v-3.01h3.011c0.207,0,0.377-0.168,0.377-0.376S13.595,9.624,13.388,9.624z M10,1.344c-4.781,0-8.656,3.875-8.656,8.656c0,4.781,3.875,8.656,8.656,8.656c4.781,0,8.656-3.875,8.656-8.656C18.656,5.219,14.781,1.344,10,1.344z M10,17.903c-4.365,0-7.904-3.538-7.904-7.903S5.635,2.096,10,2.096S17.903,5.635,17.903,10S14.365,17.903,10,17.903z"></path>
                            </svg>
                        </button>

                        <button id="toggle-edit" class="btn-edit-table" title="Редактировать таблицу">
                            <!-- Вы можете использовать SVG-иконку или текст -->
                            <svg class="icon-edit" viewBox="0 0 24 24">
                                <!-- Добавьте ваш SVG-код здесь -->
                                <path d="M18 10L14 6M2.49997 21.5L5.88434 21.124C6.29783 21.078 6.50457 21.055 6.69782 20.9925C6.86926 20.937 7.03242 20.8586 7.18286 20.7594C7.35242 20.6475 7.49951 20.5005 7.7937 20.2063L21 7C22.1046 5.89543 22.1046 4.10457 21 3C19.8954 1.89543 18.1046 1.89543 17 3L3.7937 16.2063C3.49952 16.5005 3.35242 16.6475 3.24061 16.8171C3.1414 16.9676 3.06298 17.1307 3.00748 17.3022C2.94493 17.4954 2.92195 17.7021 2.87601 18.1156L2.49997 21.5Z" />
                            </svg>
                        </button>
                        <button id="cancel-edit" class="btn-edit-table" style="display:none;" title="Отменить редактирование">
                            <!-- Добавьте SVG-иконку или текст для кнопки отмены -->
                            <svg class="icon-cancel" viewBox="0 0 24 24">
                                <!-- Ваш SVG-код -->
                                <path d="M18 6L6 18M6 6L18 18" />
                            </svg>
                        </button>
                        <button id="save-edit" class="btn-edit-table" style="display:none;" title="Сохранить изменения">
                            <svg class="icon-save-edit" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <!-- Ваш SVG-код -->
                                <path d="M7 3V6.4C7 6.96005 7 7.24008 7.10899 7.45399C7.20487 7.64215 7.35785 7.79513 7.54601 7.89101C7.75992 8 8.03995 8 8.6 8H15.4C15.9601 8 16.2401 8 16.454 7.89101C16.6422 7.79513 16.7951 7.64215 16.891 7.45399C17 7.24008 17 6.96005 17 6.4V4M17 21V14.6C17 14.0399 17 13.7599 16.891 13.546C16.7951 13.3578 16.6422 13.2049 16.454 13.109C16.2401 13 15.9601 13 15.4 13H8.6C8.03995 13 7.75992 13 7.54601 13.109C7.35785 13.2049 7.20487 13.3578 7.10899 13.546C7 13.7599 7 14.0399 7 14.6V21M21 9.32548V16.2C21 17.8802 21 18.7202 20.673 19.362C20.3854 19.9265 19.9265 20.3854 19.362 20.673C18.7202 21 17.8802 21 16.2 21H7.8C6.11984 21 5.27976 21 4.63803 20.673C4.07354 20.3854 3.6146 19.9265 3.32698 19.362C3 18.7202 3 17.8802 3 16.2V7.8C3 6.11984 3 5.27976 3.32698 4.63803C3.6146 4.07354 4.07354 3.6146 4.63803 3.32698C5.27976 3 6.11984 3 7.8 3H14.6745C15.1637 3 15.4083 3 15.6385 3.05526C15.8425 3.10425 16.0376 3.18506 16.2166 3.29472C16.4184 3.4184 16.5914 3.59135 16.9373 3.93726L20.0627 7.06274C20.4086 7.40865 20.5816 7.5816 20.7053 7.78343C20.8149 7.96237 20.8957 8.15746 20.9447 8.36154C21 8.59171 21 8.8363 21 9.32548Z" />
                            </svg>
                        </button>
                        <div id="incident-count" class="incident-count">
                            Загрузка количества инцидентов...
                        </div>

                    </div>
                </div>


                <div class="custom-table-responsive">
                    <table id="journal_table" class="display">
                        <thead>
                            <tr>
                                <th>Дата</th>
                                <th>Смена</th>
                                <th>VSAT</th>
                                <th>431</th> <!-- Reporter -->
                                <th>Скважина</th>
                                <th>Рейс</th>
                                <th>Сохр. НПВ</th>
                                <th>Тип проблемы</th>
                                <th>Статус</th>
                                <th></th>
                                <th></th> <!-- Столбец для кнопки удаления -->
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Данные загружаются через DataTables -->
                        </tbody>
                    </table>

                </div>


            </div>
        </div>

        <div class="daily-main-right">
            

            <div class="dmr-left">
                

                <div class="telegram-header">
                    <form id="sendMessageForm" class="send-message-form" enctype="multipart/form-data">
                        <div class="send-message-line">
                            <input type="text" name="Text" id="messageText" placeholder="Введите сообщение..." />
                            <button type="submit" class="send-button">
                                <svg class="icon-send" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M10.5004 12H5.00043M4.91577 12.2915L2.58085 19.2662C2.39742 19.8142 2.3057 20.0881 2.37152 20.2569C2.42868 20.4034 2.55144 20.5145 2.70292 20.5567C2.87736 20.6054 3.14083 20.4869 3.66776 20.2497L20.3792 12.7296C20.8936 12.4981 21.1507 12.3824 21.2302 12.2216C21.2993 12.082 21.2993 11.9181 21.2302 11.7784C21.1507 11.6177 20.8936 11.5019 20.3792 11.2705L3.66193 3.74776C3.13659 3.51135 2.87392 3.39315 2.69966 3.44164C2.54832 3.48375 2.42556 3.59454 2.36821 3.74078C2.30216 3.90917 2.3929 4.18255 2.57437 4.72931L4.91642 11.7856C4.94759 11.8795 4.96317 11.9264 4.96933 11.9744C4.97479 12.0171 4.97473 12.0602 4.96916 12.1028C4.96289 12.1508 4.94718 12.1977 4.91577 12.2915Z"></path>
                                </svg>
                            </button>
                        </div>
                        <input type="file" name="Files" id="messageFiles" multiple style="display: none;">
                        <label for="messageFiles" class="custom-file-label">Вложить</label>
                        <span id="file-names">Нет файлов</span> <!-- Отображение названий файлов -->


                    </form>
                </div>

                <div class="telegram-messages">
                    @foreach (var message in Model.TelegramMessages)
                    {
                        <div class="telegram-message">
                            @* Обработка аватара пользователя *@
                            @{
                                string avatarSrc;
                                if (message.AvatarUrl.StartsWith("http", StringComparison.OrdinalIgnoreCase))
                                {
                                    avatarSrc = message.AvatarUrl; // Внешний URL
                                }
                                else if (message.AvatarUrl.StartsWith("/"))
                                {
                                    avatarSrc = message.AvatarUrl; // Абсолютный относительный путь
                                }
                                else
                                {
                                    avatarSrc = Url.Content($"~/{message.AvatarUrl}"); // Относительный путь без ведущего слеша
                                }
                            }
                            <img src="@avatarSrc" alt="@message.Username" class="avatar" onerror="this.onerror=null; this.src='@Url.Content("~/telegram-avatars/default_avatar.jpg")';" />
                            <div class="message-bubble">
                                <p class="message-username">@message.Username <span class="message-date">@message.Date.ToString("g")</span></p>

                                <!-- Отображение текста сообщения, если он есть -->
                                @if (!string.IsNullOrWhiteSpace(message.Text))
                                {
                                    <p class="message-text">@message.Text</p>
                                }

                                <!-- Отображение фотографий -->
                                @if (message.Photos != null && message.Photos.Any())
                                {
                                    <div class="message-photos">
                                        @foreach (var photo in message.Photos)
                                        {
                                            <img src="@Url.Content($"~/{photo.FilePath}")" alt="Фото" class="message-photo" onerror="this.onerror=null; this.src='@Url.Content("~/telegram-avatars/default_avatar.jpg")';" />
                                        }
                                    </div>
                                }

                                <!-- Отображение документов -->
                                @if (message.Documents != null && message.Documents.Any())
                                {
                                    <div class="message-documents">
                                        <p>Документы:</p>
                                        <ul>
                                            @foreach (var doc in message.Documents)
                                            {
                                                <li>
                                                    <a href="@Url.Content($"~/{doc.FilePath}")" target="_blank">
                                                        @System.IO.Path.GetFileName(doc.FilePath)
                                                    </a>
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                }

                            </div>
                        </div>
                    }
                </div>


            <!-- Виджет отображения времени -->
                <div class="clocks-container">
                    <div class="clock" id="kaliningrad-clock">
                        <div class="clock-city">
                            <h3>Калининград </h3>
                            <p class="time">--:--</p>
                        </div>
                        
                    </div>

                    <div class="clock" id="moscow-clock">
                        <div class="clock-city">
                            <h3>Москва </h3>
                            <p class="time">--:--</p>
                        </div>
                        
                    </div>

                    <div class="clock" id="tyumen-clock">
                        <div class="clock-city">
                            <h3>Тюмень</h3>
                            <p class="time">--:--</p>
                        </div>
                        
                    </div>
                    
                    <div class="clock" id="leninsk-clock">
                        <div class="clock-city">
                            <h3>Ленск </h3>
                            <p class="time">--:--</p>
                        </div>
                        
                    </div>
                    
                </div>
            </div>


            <div class="dmr-center" id="kanban-tasks-container">
                <div id="task-count" class="task-count">Всего задач: 0</div>
                <!-- Задачи будут добавляться сюда динамически -->
            </div>


            <div class="dmr-right">
                <div class="weather-widget-container">
                    <div id="weather-widgets">
                        @* Цикл по полученным данным о погоде *@
                        @if (Model.WeatherData != null && Model.WeatherData.Any())
                        {
                            foreach (var weather in Model.WeatherData)
                            {
                                if (weather == null)
                                {
                                    <p>Нет данных по одному из городов</p>
                                    continue;
                                }

                                var desc = weather.Weather?.FirstOrDefault();

                                <div class="weather-widget"
                                     style="background-image: url('@(weather.BackgroundImage ?? "/img/weather/default.png")');
                    background-size: cover;
                    background-position: center;">
                                    <div class="weather-header">
                                        <h3 class="weather-city-name">@weather.Name</h3>

                                        @* Если desc не null, значит есть Icon *@
                                        @if (desc != null)
                                        {
                                            <img src="@($"https://openweathermap.org/img/wn/{desc.Icon}@2x.png")" alt="Icon" class="weather-icon" />
                                        }
                                    </div>

                                    @* Если есть описание *@
                                    @if (desc != null)
                                    {
                                        <div class="weather-description">@desc.Description</div>
                                    }

                                    @* Проверка Main и Wind *@
                                    @if (weather.Main != null)
                                    {
                                        @if (weather.Wind != null)
                                        {
                                            <p><strong>Ветер:</strong> @Math.Round(weather.Wind.Speed) м/с</p>
                                        }
                                        <p><strong>Влажность:</strong> @weather.Main.Humidity %</p>
                                        <p><strong>Давление:</strong> @weather.Main.Pressure мм рт. ст.</p>

                                        <p class="temperature"> @Math.Round(weather.Main.Temp) °C</p>
                                        <p style="text-align:right"><strong>Ощущается как:</strong> @Math.Round(weather.Main.FeelsLike) °C</p>
                                    }
                                </div>
                            }
                        }
                        else
                        {
                            <p>Нет данных о погоде</p>
                        }

                    </div>
                </div>
            </div>

        </div>


    <!-- Контейнер для Toast уведомлений -->
    <div id="customToastContainer" class="custom-toast-container"></div>


    <script>
        // Передача серверных переменных в JavaScript
        var loggedUser = '@loggedUser';
        var currentTime = '@DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss")'; 
        var shift = '@shift';
    </script>
        <script src="~/js/dailymain.js" defer></script>
    </div>
    

    

    <script type="text/javascript">
        $(document).ready(function () {
            //Соединение с Hub
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/kanbanHub")
                .withAutomaticReconnect()
                .build();

            // Обработчик получения нового задания
            connection.on("ReceiveNewTask", function (task) {
                console.log("Новая задача получена:", task);
                // Добавление задачу в Kanban-доску
                addTaskToKanban(task);

                // Уведомление пользователю
                showCustomToast("Новая задача", `Новая задача "${task.taskName}" была добавлена.`);
            });

            // Обработчик получения уведомления о перемещении задачи в первую колонку
            connection.on("ReceiveTaskMovedToFirstColumn", function (task) {
                console.log("Задача перемещена в первую колонку первой доски:", task);
                // Добавлеие задач в Kanban-доску
                addTaskToKanban(task);

                // Уведомление пользователю
                showCustomToast("Задача перемещена", `Задача "${task.taskName}" была перемещена в текущие задачи.`);
            });

            // Запуск соединения
            connection.start().then(function () {
                console.log("Соединение с SignalR Hub установлено.");
            }).catch(function (err) {
                return console.error(err.toString());
            });

            // Функция для добавления задачи в Kanban-доску
            function addTaskToKanban(task) {
                // Проверяем, есть ли колонка с нужным идентификатором
                const targetColumn = $(`.kanban-column[data-id="${task.columnId}"]`);
                if (targetColumn.length) {
                    // Создаем HTML для задачи
                    const taskHtml = `
                            <div class="kanban-task" data-id="${task.id}" data-row-version="${task.rowVersion}">
                                <div class="note-task-header" style="background-color: ${task.taskColor};">
                                    <strong>${task.taskName}</strong>
                                    <!-- Дополнительные элементы -->
                                </div>
                                <!-- Остальная разметка задачи -->
                            </div>
                        `;
                    // Добавляем задачу в колонку
                    targetColumn.find('.kanban-tasks').append(taskHtml);
                } else {
                    console.warn("Целевая колонка не найдена на странице.");
                }
            }

            // Функция для отображения пользовательских Toast уведомлений
            function showCustomToast(title, message) {
                const toastContainer = $('#customToastContainer');

                const toastId = 'custom-toast-' + Date.now();
                const toastHtml = `
                        <div class="custom-toast" id="${toastId}">
                            <div class="custom-toast-header">
                                <span>${title}</span>
                                <button class="custom-toast-close" aria-label="Close">&times;</button>
                            </div>
                            <div class="custom-toast-body">
                                ${message}
                            </div>
                        </div>
                    `;

                // Добавляем Toast в контейнер
                toastContainer.append(toastHtml);

                const $toast = $('#' + toastId);

                // Показать Toast с анимацией
                setTimeout(function () {
                    $toast.addClass('show');
                }, 100); 

                setTimeout(function () {
                    hideCustomToast($toast);
                }, 5000000);

                // Обработчик для кнопки закрытия
                $toast.find('.custom-toast-close').on('click', function () {
                    hideCustomToast($toast);
                });
            }

            // Функция для скрытия Toast
            function hideCustomToast($toast) {
                $toast.removeClass('show').addClass('hide');

                setTimeout(function () {
                    $toast.remove();
                }, 5000000); 
            }
        });
    </script>

    <script type="text/javascript">
        $(document).ready(function () {
            // Создание подключения к NotificationHub
            const notificationConnection = new signalR.HubConnectionBuilder()
                .withUrl("/notificationHub")
                .withAutomaticReconnect()
                .build();

            // Запуск соединения
            notificationConnection.start().then(function () {
                console.log("Подключено к NotificationHub");
            }).catch(function (err) {
                return console.error(err.toString());
            });

            // Обработка входящих уведомлений о новых инцидентах
            notificationConnection.on("ReceiveNewIncident", function (incident) {
                console.log("Получен новый инцидент:", incident);
                console.log("incident.Reporter:", incident.Reporter);
                console.log("incident.reporter:", incident.reporter);

                
                showCustomToast(
                    "Новая запись в журнале",
                    `Добавлена новая запись в журнале пользователем: ${incident.reporter}. Тип проблемы: ${incident.problemType}. Скважина: ${incident.well}. Решение: ${incident.solution}. VSAT: ${incident.vsat || 'Неизвестно'}.`
                );
            });


            // Функция для отображения Toast
            function showCustomToast(title, message) {
                const toastContainer = $('#customToastContainer');

                const toastId = 'custom-toast-' + Date.now();
                const toastHtml = `
                        <div class="custom-toast" id="${toastId}">
                            <div class="custom-toast-header">
                                <span>${title}</span>
                                <button class="custom-toast-close" aria-label="Close">&times;</button>
                            </div>
                            <div class="custom-toast-body">
                                ${message}
                            </div>
                        </div>
                    `;

                // Добавляем Toast в контейнер
                toastContainer.append(toastHtml);

                const $toast = $('#' + toastId);

                // Toast с анимацией
                setTimeout(function () {
                    $toast.addClass('show');
                }, 100);

                setTimeout(function () {
                    hideCustomToast($toast);
                }, 5000000);

                // Обработчик кнопки закрытия
                $toast.find('.custom-toast-close').on('click', function () {
                    hideCustomToast($toast);
                });
            }

            // Функция скрытия Toast
            function hideCustomToast($toast) {
                $toast.removeClass('show').addClass('hide');

                setTimeout(function () {
                    $toast.remove();
                }, 5000000);
            }
        });
    </script>

    <script type="text/javascript">
        $(document).ready(function () {
            // Создание подключения к TelegramHub
            const telegramConnection = new signalR.HubConnectionBuilder()
                .withUrl("/telegramHub")
                .withAutomaticReconnect()
                .build();

            // Запуск соединения
            telegramConnection.start().then(function () {
                console.log("Подключено к TelegramHub");
            }).catch(function (err) {
                return console.error(err.toString());
            });

            // Обработка входящих Telegram сообщений
            telegramConnection.on("ReceiveTelegramMessage", function (message) {
                console.log("Получено новое сообщение Telegram:", message);

                // Добавление сообщение в интерфейс
                addTelegramMessageToUI(message);
            });

            // Функция для добавления сообщения в UI
            function addTelegramMessageToUI(message) {
                var messageHtml = '<div class="telegram-message">';

                messageHtml += '<img src="' + message.avatarUrl + '" alt="' + message.username + '" class="avatar" onerror="this.onerror=null; this.src=\'/telegram-avatars/default_avatar.jpg\';" />';
                messageHtml += '<div class="message-bubble">';
                messageHtml += '<p class="message-username">' + message.username + ' <span class="message-date">' + new Date(message.date).toLocaleString() + '</span></p>';

                if (message.text && message.text.trim() !== '') {
                    messageHtml += '<p class="message-text">' + message.text + '</p>';
                }

                // Обработка фотографий
                if (message.photoUrls && message.photoUrls.length > 0) {
                    messageHtml += '<div class="message-photos">';
                    message.photoUrls.forEach(function (photoUrl) {
                        messageHtml += '<img src="' + photoUrl + '" alt="Фото" class="message-photo" onerror="this.onerror=null; this.src=\'/telegram-avatars/default_avatar.jpg\';" />';
                    });
                    messageHtml += '</div>';
                }

                // Обработка документов
                if (message.documentUrls && message.documentUrls.length > 0) {
                    messageHtml += '<div class="message-documents">';
                    messageHtml += '<p>Документы:</p><ul>';
                    message.documentUrls.forEach(function (docUrl) {
                        var fileName = docUrl.substring(docUrl.lastIndexOf('/') + 1);
                        messageHtml += '<li><a href="' + docUrl + '" target="_blank">' + fileName + '</a></li>';
                    });
                    messageHtml += '</ul></div>';
                }

                messageHtml += '</div></div>';

                // Новое сообщение в контейнер сообщений
                $('.telegram-messages').prepend(messageHtml);
            }

        });
    </script>

</body>
</html>
